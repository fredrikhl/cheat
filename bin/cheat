#!/venv/simple/bin/python
# encoding: utf-8
""" Show or edit cheat sheets.

Cheat allows you to create and view interactive cheatsheets on the
command-line. It was designed to help remind *nix system administrators of
options for commands that they use frequently, but not frequently enough to
remember.

Examples:
  To look up 'tar':
  cheat tar

  To create or edit the cheatsheet for 'foo':
  cheat -e foo
"""
from __future__ import print_function, unicode_literals

import cheat
from cheat.sheets import Sheets
from cheat.utils import colorize, edit
from cheat.sheet import CheatSheet, get_editable

import argparse


VERSION = '.'.join(str(x) for x in cheat.version)


def print_sheets():
    """ Print list of sheets and return. """
    ordered_sheets = []
    pad_length = max((len(x) for x in Sheets.cheat_sheets)) + 1
    for name in Sheets.cheat_sheets:
        ordered_sheets.append(
            name.ljust(pad_length) + Sheets.cheat_sheets[name])
    print("\n".join(sorted(ordered_sheets)))
    return 0


def print_paths():
    """ Print list of cheat sheets search paths and return. """
    paths = "\n".join(Sheets.sheet_paths)
    if not paths:
        return "No paths configured"
    print(paths)
    return 0


def print_search(term):
    """ Print search results and return. """
    results = []

    for name, lines in Sheets.search(term):
        results.append("%s: \n\t%s" % (name, "\n\t".join(lines)))

    if not results:
        return "No matches for %r\n" % term

    print("\n".join(results))
    return 0


def edit_sheet(name):
    """ Edit cheat sheet. """
    try:
        filename = get_editable(name)
        edit(filename)
    except Exception, e:
        return str(e)
    return 0


def show_sheet(name):
    sheet = CheatSheet(name)
    if not sheet.exists:
        return "No cheat sheet %r in search paths" % sheet.name
    print(colorize(sheet.contents, sheet.filename))
    return 0


def CallAndExitAction(callback):
    """ Returns a callback class. """
    class _action(argparse.Action):
        """ An action that calls 'callback' and exits.  """

        def __init__(self, option_strings, dest, help=None):
            super(_action, self).__init__(
                option_strings=option_strings,
                dest=argparse.SUPPRESS,
                default=argparse.SUPPRESS,
                nargs=0,
                help=help)

        def __call__(self, parser, ns, opt_value, option_string=None):
            callback()
            parser.exit()
    return _action


class SearchAction(argparse.Action):
    """ Argparse action that searches for cheat sheets. """

    def __init__(self, option_strings, dest, metavar='KEYWORD', help=None):
        super(SearchAction, self).__init__(
            option_strings=option_strings,
            dest=argparse.SUPPRESS,
            default=argparse.SUPPRESS,
            nargs='*',
            metavar=metavar,
            help=help)

    def __call__(self, parser, ns, opt_value, option_string=None):
        print_search(' '.join(opt_value))
        parser.exit()


def main(args=None):
    """ Script entry point. """

    parser = argparse.ArgumentParser()

    parser.add_argument(
        '-l', '--list',
        action=CallAndExitAction(print_sheets),
        help='List existing cheat sheets and exit.')

    parser.add_argument(
        '-d', '--directories',
        action=CallAndExitAction(print_paths),
        help='List cheat sheet directories and exit.')

    parser.add_argument(
        '-v', '--version',
        action='version',
        version='%(prog)s version {:s}'.format(VERSION),
        help="show program's version number and exit")

    parser.add_argument(
        '-s', '--search',
        metavar='KEYWORD',
        action=SearchAction,
        help='Search cheat sheets for %(metavar)s.')

    parser.add_argument(
        '-e', '--edit',
        action='store_true',
        default=False,
        help='Edit the cheat sheet')

    parser.add_argument(
        'sheet',
        default=None,
        metavar='CHEATSHEET',
        help='Show the cheat sheet named %(metavar)r.')
    args = parser.parse_args(args)

    if args.edit:
        return edit_sheet(args.sheet)

    return show_sheet(args.sheet)


if __name__ == '__main__':
    raise SystemExit(main())
