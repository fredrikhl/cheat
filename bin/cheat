#!/usr/bin/env python
# encoding: utf-8
""" Show or edit cheat sheets.

Cheat allows you to create and view interactive cheatsheets on the
command-line. It was designed to help remind *nix system administrators of
options for commands that they use frequently, but not frequently enough to
remember.

Examples:
  To look up 'tar':
  cheat tar

  To create or edit the cheatsheet for 'foo':
  cheat -e foo
"""
from __future__ import print_function, unicode_literals

import argparse
import os

import cheat
from cheat.sheets import Sheets
from cheat.utils import (
    Colorizer,
    edit,
    parse_bool_setting,
    parse_filters_setting,
    parse_styles_setting,
)
from cheat.sheet import CheatSheet, get_editable


def print_sheets():
    """ Print list of sheets and return. """
    ordered_sheets = []
    pad_length = max((len(x) for x in Sheets.cheat_sheets)) + 1
    for name in Sheets.cheat_sheets:
        ordered_sheets.append(
            name.ljust(pad_length) + Sheets.cheat_sheets[name])
    print("\n".join(sorted(ordered_sheets)))
    return 0


def print_paths():
    """ Print list of cheat sheets search paths and return. """
    paths = "\n".join(Sheets.sheet_paths)
    if not paths:
        return "No paths configured"
    print(paths)
    return 0


def print_search(term):
    """ Print search results and return. """
    results = []

    for name, lines in Sheets.search(term):
        results.append("%s: \n\t%s" % (name, "\n\t".join(lines)))

    if not results:
        return "No matches for %r\n" % term

    print("\n".join(results))
    return 0


def edit_sheet(name):
    """ Edit cheat sheet. """
    try:
        filename = get_editable(name)
        edit(filename)
    except Exception as e:
        return str(e)
    return 0


def show_sheet(name, colorize):
    sheet = CheatSheet(name)
    if not sheet.exists:
        return "No cheat sheet %r in search paths" % sheet.name
    print(colorize(sheet.contents, sheet.filename))
    return 0


def CallAndExitAction(callback):  # noqa: N802
    """ Returns a callback class. """
    class _Action(argparse.Action):
        """ An action that calls 'callback' and exits.  """

        def __init__(self, option_strings, dest, help=None):
            super(_Action, self).__init__(
                option_strings=option_strings,
                dest=argparse.SUPPRESS,
                default=argparse.SUPPRESS,
                nargs=0,
                help=help)

        def __call__(self, parser, ns, opt_value, option_string=None):
            callback()
            parser.exit()
    return _Action


class SearchAction(argparse.Action):
    """ Argparse action that searches for cheat sheets. """

    def __init__(self, option_strings, dest, metavar='KEYWORD', help=None):
        super(SearchAction, self).__init__(
            option_strings=option_strings,
            dest=argparse.SUPPRESS,
            default=argparse.SUPPRESS,
            nargs='*',
            metavar=metavar,
            help=help)

    def __call__(self, parser, ns, opt_value, option_string=None):
        # TODO: Auto-detect terminal encoding?
        # TODO: Wilcard in join? Regex support?
        print_search(' '.join(opt_value))
        parser.exit()


def main(args=None):
    """ Script entry point. """

    default_colorize = parse_bool_setting(os.environ.get('CHEATCOLORS', ''))
    default_lexer = os.environ.get('CHEATLEXER') or None
    default_styles = parse_styles_setting(os.environ.get('CHEATSTYLE', ''))
    default_filters = parse_filters_setting(os.environ.get('CHEATFILTERS', ''))

    parser = argparse.ArgumentParser()

    fmt_args = parser.add_argument_group('formatting')
    colorize_mutex = fmt_args.add_mutually_exclusive_group()
    colorize_mutex.add_argument(
        '--colors',
        dest='do_colorize',
        action='store_true',
        help='use colors' + (' (default)' if default_colorize else '')
    )
    colorize_mutex.add_argument(
        '--no-colors',
        dest='do_colorize',
        action='store_false',
        help='no not use colors' + ('' if default_colorize else ' (default)')
    )
    colorize_mutex.set_defaults(do_colorize=default_colorize)
    fmt_args.add_argument(
        '--lexer',
        dest='lexer_name',
        default=default_lexer,
        help='Stylize cheat sheet using %(metavar)s (default: %(default)s)',
        metavar='<lexer name>',
    )

    parser.add_argument(
        '-l', '--list',
        action=CallAndExitAction(print_sheets),
        help='List existing cheat sheets and exit.')

    parser.add_argument(
        '-d', '--directories',
        action=CallAndExitAction(print_paths),
        help='List cheat sheet directories and exit.')

    parser.add_argument(
        '-v', '--version',
        action='version',
        version='%(prog)s version {:s}'.format(cheat.__version__),
        help="show program's version number and exit")

    parser.add_argument(
        '-s', '--search',
        metavar='KEYWORD',
        action=SearchAction,
        help='Search cheat sheets for %(metavar)s.')

    parser.add_argument(
        '-e', '--edit',
        action='store_true',
        default=False,
        help='Edit the cheat sheet')

    parser.add_argument(
        'sheet',
        default=None,
        metavar='CHEATSHEET',
        help='Show the cheat sheet named %(metavar)r.')
    args = parser.parse_args(args)

    if args.edit:
        return edit_sheet(args.sheet)

    colorize = Colorizer(
        enable=args.do_colorize,
        lexer_name=args.lexer_name,
        styles=default_styles,
        filters=default_filters,
    )

    return show_sheet(args.sheet, colorize=colorize)


if __name__ == '__main__':
    raise SystemExit(main())
